// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static bool color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int fill, i;
        let fill = color * (-1);
        let i = screen;
        while (i < 24576) {
            let screen[i] = fill;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = screen + (32 * y) + (x / 16);
        let value = Memory.peek(address);
        if (color) {
            let value = value | Math.identity[Math.Mod(x, 16)];
        } else {
            let value = value & (~Math.identity[Math.Mod(x, 16)]);
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, coefa, coefb;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        let coefa = 1;
        let coefb = 1;
        
        if (dx < 0) {
            let coefa = -1;
            let dx = Math.abs(dx);
        }
        if (dy < 0) {
            let coefb = -1;
            let dy = Math.abs(dy);           
        }
        
        if (dy = 0) {
            while (a < dx) {
                do Screen.drawPixel(x1 + (a * coefa), y1);
                let a = a + 1;
            }
            return;
        } else if (dx = 0) {
            while (b < dy) {
                do Screen.drawPixel(x1, y1 + (b * coefb));
                let b = b + 1;
            }
            return;
        }

        while (~(a > dx) | ~(b > dy)) {
            do Screen.drawPixel(x1 + (a * coefa), y1 + (b * coefb));
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dx;
            } else {
                let b = b + 1;
                let diff = diff + dy;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, i, temp;
        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dy = y2 - y1;
        let i = 0;
        while (i < dy) {
            do Screen.drawLine(x1, y1 + i; x2, y2 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        if (r > 181) {
            do Output.printString("r is to big");
            return;
        }
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
