// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;

        // init with one single segment
        let heap[0] = 0;
        let heap[1] = 14335;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var array segment, bestFit;
        let segment = freeList;
        let bestFit = 0;
        while (~(segment = 0)) {
            if ( (segment[1] > (size + 2)) & ((segment[1] < bestFit[1]) | (bestFit = 0)) ) {
                let bestFit = segment;
            }
            let segment = segment[0];
        }
        if (bestFit = 0) {
            do Memory.defragmentize();
            return Memory.alloc(size);
        }

        var Array newBlock;
        let bestFit[1] = bestFit[1] - size - 2;
        let newBlock = bestFit + bestFit[1];
        let newBlock[0] = 0;
        let newBlock[1] = size;

        return newBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = freeList;
        let freeList = o;
        return;
    }    

    function void defragmentize() {
        var Array current, next, previous;
        var bool isSorted;
        let isSorted = false;

        // sort the linked list in ascending order
        while (~isSorted) {
            let isSorted = true;
            let previous = freeList;
            let current = previous[0];
            while (~(current[0] = 0)) {
                let next = current[0];
                if (current[1] > next[1]) {
                    var Array temp;
                    let temp = next[0];
                    let previous[0] = next;
                    let next[0] = current;
                    let current[0] = temp;
                    let isSorted = false;
                } else {
                    let previous = current;
                    let current = next;
                }
            }
        }

        // merge the segments
        let current = freeList;
        while (~(current[0] = 0)) {
            let next = current[0];
            if (next = (current + current[1] + 2)) {
                let current[0] = next[0];
                let current[1] = current[1] + next[1] + 2;
            }
            let current = current[0];
        }

        return;
    }
}
